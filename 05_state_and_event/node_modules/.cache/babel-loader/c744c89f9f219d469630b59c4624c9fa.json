{"ast":null,"code":"import _slicedToArray from \"/Users/hagi/ProgramingProject/TypeScriptProjects/react-guide-material/05_state_and_event/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _this = this,\n  _jsxFileName = \"/Users/hagi/ProgramingProject/TypeScriptProjects/react-guide-material/05_state_and_event/src/050_prev_state/end/Example.js\";\nimport { useState } from \"react\";\n\n/* \nPOINT stateの更新は予約される（すぐには更新されない。）\nPOINT 更新予定のstateの値の取得方法\n*/\nvar Example = function Example() {\n  var _useState = useState(0),\n    _useState2 = _slicedToArray(_useState, 2),\n    count = _useState2[0],\n    setCount = _useState2[1];\n  var countUp = function countUp() {\n    setCount(count + 1);\n    setCount(function (prevstate /* 現在のstateの値 */) {\n      return prevstate + 1; /* 次のstateの値 */\n    });\n\n    console.log(count);\n  };\n  var countDown = function countDown() {\n    setCount(count - 1);\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }\n  }, \"\\u73FE\\u5728\\u306E\\u30AB\\u30A6\\u30F3\\u30C8\\u6570: \", count), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: countUp,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }\n  }, \"+\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: countDown,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  }, \"-\"));\n};\nexport default Example;","map":{"version":3,"names":["useState","Example","count","setCount","countUp","prevstate","console","log","countDown"],"sources":["/Users/hagi/ProgramingProject/TypeScriptProjects/react-guide-material/05_state_and_event/src/050_prev_state/end/Example.js"],"sourcesContent":["import { useState } from \"react\";\n\n/* \nPOINT stateの更新は予約される（すぐには更新されない。）\nPOINT 更新予定のstateの値の取得方法\n*/\nconst Example = () => {\n  const [count, setCount] = useState(0);\n  const countUp = () => {\n    setCount(count + 1);\n    setCount(prevstate /* 現在のstateの値 */ => {\n      return prevstate + 1; /* 次のstateの値 */\n    } );\n    console.log(count);\n  };\n  const countDown = () => {\n    setCount(count - 1);\n  };\n  return (\n    <>\n      <p>現在のカウント数: {count}</p>\n      <button\n        onClick={countUp}\n      >+</button>\n      <button\n        onClick={countDown}\n      >-</button>\n    </>\n  );\n};\n\nexport default Example;\n"],"mappings":";;;AAAA,SAASA,QAAQ,QAAQ,OAAO;;AAEhC;AACA;AACA;AACA;AACA,IAAMC,OAAO,GAAG,SAAVA,OAAO,GAAS;EAAA,gBACMD,QAAQ,CAAC,CAAC,CAAC;IAAA;IAA9BE,KAAK;IAAEC,QAAQ;EACtB,IAAMC,OAAO,GAAG,SAAVA,OAAO,GAAS;IACpBD,QAAQ,CAACD,KAAK,GAAG,CAAC,CAAC;IACnBC,QAAQ,CAAC,UAAAE,SAAS,CAAC,kBAAoB;MACrC,OAAOA,SAAS,GAAG,CAAC,CAAC,CAAC;IACxB,CAAC,CAAE;;IACHC,OAAO,CAACC,GAAG,CAACL,KAAK,CAAC;EACpB,CAAC;EACD,IAAMM,SAAS,GAAG,SAAZA,SAAS,GAAS;IACtBL,QAAQ,CAACD,KAAK,GAAG,CAAC,CAAC;EACrB,CAAC;EACD,oBACE,uDACE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,yDAAcA,KAAK,CAAK,eACxB;IACE,OAAO,EAAEE,OAAQ;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,OACR,eACX;IACE,OAAO,EAAEI,SAAU;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,OACV,CACV;AAEP,CAAC;AAED,eAAeP,OAAO"},"metadata":{},"sourceType":"module"}