{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"/Users/hagi/ProgramingProject/TypeScriptProjects/react-guide-material/05_state_and_event/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/defineProperty\");\nvar _slicedToArray = require(\"/Users/hagi/ProgramingProject/TypeScriptProjects/react-guide-material/05_state_and_event/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toHaveStyle = toHaveStyle;\nvar _chalk = _interopRequireDefault(require(\"chalk\"));\nvar _utils = require(\"./utils\");\nfunction getStyleDeclaration(document, css) {\n  var styles = {}; // The next block is necessary to normalize colors\n\n  var copy = document.createElement('div');\n  Object.keys(css).forEach(function (property) {\n    copy.style[property] = css[property];\n    styles[property] = copy.style[property];\n  });\n  return styles;\n}\nfunction isSubset(styles, computedStyle) {\n  return !!Object.keys(styles).length && Object.entries(styles).every(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n      prop = _ref2[0],\n      value = _ref2[1];\n    return computedStyle[prop] === value || computedStyle.getPropertyValue(prop.toLowerCase()) === value;\n  });\n}\nfunction printoutStyles(styles) {\n  return Object.keys(styles).sort().map(function (prop) {\n    return \"\".concat(prop, \": \").concat(styles[prop], \";\");\n  }).join('\\n');\n} // Highlights only style rules that were expected but were not found in the\n// received computed styles\n\nfunction expectedDiff(diffFn, expected, computedStyles) {\n  var received = Array.from(computedStyles).filter(function (prop) {\n    return expected[prop] !== undefined;\n  }).reduce(function (obj, prop) {\n    return Object.assign(obj, _defineProperty({}, prop, computedStyles.getPropertyValue(prop)));\n  }, {});\n  var diffOutput = diffFn(printoutStyles(expected), printoutStyles(received)); // Remove the \"+ Received\" annotation because this is a one-way diff\n\n  return diffOutput.replace(\"\".concat(_chalk.default.red('+ Received'), \"\\n\"), '');\n}\nfunction toHaveStyle(htmlElement, css) {\n  var _this = this;\n  (0, _utils.checkHtmlElement)(htmlElement, toHaveStyle, this);\n  var parsedCSS = typeof css === 'object' ? css : (0, _utils.parseCSS)(css, toHaveStyle, this);\n  var getComputedStyle = htmlElement.ownerDocument.defaultView.getComputedStyle;\n  var expected = getStyleDeclaration(htmlElement.ownerDocument, parsedCSS);\n  var received = getComputedStyle(htmlElement);\n  return {\n    pass: isSubset(expected, received),\n    message: function message() {\n      var matcher = \"\".concat(_this.isNot ? '.not' : '', \".toHaveStyle\");\n      return [_this.utils.matcherHint(matcher, 'element', ''), expectedDiff(_this.utils.diff, expected, received)].join('\\n\\n');\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"script"}