{"ast":null,"code":"/*! https://mths.be/cssescape v1.5.1 by @mathias | MIT license */\n;\n(function (root, factory) {\n  // https://github.com/umdjs/umd/blob/master/returnExports.js\n  if (typeof exports == 'object') {\n    // For Node.js.\n    module.exports = factory(root);\n  } else if (typeof define == 'function' && define.amd) {\n    // For AMD. Register as an anonymous module.\n    define([], factory.bind(root, root));\n  } else {\n    // For browser globals (not exposing the function separately).\n    factory(root);\n  }\n})(typeof global != 'undefined' ? global : this, function (root) {\n  if (root.CSS && root.CSS.escape) {\n    return root.CSS.escape;\n  }\n\n  // https://drafts.csswg.org/cssom/#serialize-an-identifier\n  var cssEscape = function cssEscape(value) {\n    if (arguments.length == 0) {\n      throw new TypeError('`CSS.escape` requires an argument.');\n    }\n    var string = String(value);\n    var length = string.length;\n    var index = -1;\n    var codeUnit;\n    var result = '';\n    var firstCodeUnit = string.charCodeAt(0);\n    while (++index < length) {\n      codeUnit = string.charCodeAt(index);\n      // Note: there’s no need to special-case astral symbols, surrogate\n      // pairs, or lone surrogates.\n\n      // If the character is NULL (U+0000), then the REPLACEMENT CHARACTER\n      // (U+FFFD).\n      if (codeUnit == 0x0000) {\n        result += \"\\uFFFD\";\n        continue;\n      }\n      if (\n      // If the character is in the range [\\1-\\1F] (U+0001 to U+001F) or is\n      // U+007F, […]\n      codeUnit >= 0x0001 && codeUnit <= 0x001F || codeUnit == 0x007F ||\n      // If the character is the first character and is in the range [0-9]\n      // (U+0030 to U+0039), […]\n      index == 0 && codeUnit >= 0x0030 && codeUnit <= 0x0039 ||\n      // If the character is the second character and is in the range [0-9]\n      // (U+0030 to U+0039) and the first character is a `-` (U+002D), […]\n\n      index == 1 && codeUnit >= 0x0030 && codeUnit <= 0x0039 && firstCodeUnit == 0x002D) {\n        // https://drafts.csswg.org/cssom/#escape-a-character-as-code-point\n        result += '\\\\' + codeUnit.toString(16) + ' ';\n        continue;\n      }\n      if (\n      // If the character is the first character and is a `-` (U+002D), and\n      // there is no second character, […]\n      index == 0 && length == 1 && codeUnit == 0x002D) {\n        result += '\\\\' + string.charAt(index);\n        continue;\n      }\n\n      // If the character is not handled by one of the above rules and is\n      // greater than or equal to U+0080, is `-` (U+002D) or `_` (U+005F), or\n      // is in one of the ranges [0-9] (U+0030 to U+0039), [A-Z] (U+0041 to\n      // U+005A), or [a-z] (U+0061 to U+007A), […]\n      if (codeUnit >= 0x0080 || codeUnit == 0x002D || codeUnit == 0x005F || codeUnit >= 0x0030 && codeUnit <= 0x0039 || codeUnit >= 0x0041 && codeUnit <= 0x005A || codeUnit >= 0x0061 && codeUnit <= 0x007A) {\n        // the character itself\n        result += string.charAt(index);\n        continue;\n      }\n\n      // Otherwise, the escaped character.\n      // https://drafts.csswg.org/cssom/#escape-a-character\n      result += '\\\\' + string.charAt(index);\n    }\n    return result;\n  };\n  if (!root.CSS) {\n    root.CSS = {};\n  }\n  root.CSS.escape = cssEscape;\n  return cssEscape;\n});","map":null,"metadata":{},"sourceType":"script"}