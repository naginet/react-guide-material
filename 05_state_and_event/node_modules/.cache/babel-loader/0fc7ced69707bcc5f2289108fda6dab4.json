{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/Users/hagi/ProgramingProject/TypeScriptProjects/react-guide-material/05_state_and_event/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toBeEmptyDOMElement = toBeEmptyDOMElement;\nvar _utils = require(\"./utils\");\nfunction toBeEmptyDOMElement(element) {\n  var _this = this;\n  (0, _utils.checkHtmlElement)(element, toBeEmptyDOMElement, this);\n  return {\n    pass: isEmptyElement(element),\n    message: function message() {\n      return [_this.utils.matcherHint(\"\".concat(_this.isNot ? '.not' : '', \".toBeEmptyDOMElement\"), 'element', ''), '', 'Received:', \"  \".concat(_this.utils.printReceived(element.innerHTML))].join('\\n');\n    }\n  };\n}\n/**\n * Identifies if an element doesn't contain child nodes (excluding comments)\n * â„¹ Node.COMMENT_NODE can't be used because of the following issue \n * https://github.com/jsdom/jsdom/issues/2220\n *\n * @param {*} element an HtmlElement or SVGElement\n * @return {*} true if the element only contains comments or none\n */\n\nfunction isEmptyElement(element) {\n  var nonCommentChildNodes = _toConsumableArray(element.childNodes).filter(function (node) {\n    return node.nodeType !== 8;\n  });\n  return nonCommentChildNodes.length === 0;\n}","map":null,"metadata":{},"sourceType":"script"}